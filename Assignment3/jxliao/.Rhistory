table(debug[Subject,IDE])
table(debug[,c(Subject,IDE)])
mean(debug$Seconds)
variance(debug$Seconds)
var(debug$Seconds)
hist(debug$Seconds)
sd(debug$Seconds)
shapiro.test(debug$Seconds)
shapiro.test(rnorm(100, mean = 5, sd = 3))
shapiro.test(runif(100, min = 2, max = 4))
hist(log(debug$Seconds))
shapiro.test(log(debug$Seconds))
lm1 = anova(debug, Seconds~IDE*Language)
lm1 = anova(data=debug, Seconds~IDE*Language)
lm1 = anova(data=debug, Seconds~IDE + Language)
lm1 = anova(Seconds~IDE+Language,data=debug)
lm1 = aov(Seconds~IDE+Language,data=debug)
lm1 = aov(Seconds~IDE*Language,data=debug)
summary(lm1)
lm1 = aov(Seconds~IDE + Language,data=debug)
summary(lm1)
lm1 = aov(log(Seconds)~IDE + Language,data=debug)
summary(lm1)
plot(lm1)
anova(lm1)
lm1 = aov(log(Seconds)~IDE + Language,data=debug)
lm1 = aov(log(Seconds)~IDE * Language,data=debug)
anova(lm1)
summary(lm1)
lm1
kinchat <- read_csv("study/OneDrive - UC Davis/study/2019spring-pro/ECS289G/midterm/kinchat_exp_subset.csv")
View(kinchat)
kinchat <- read_csv("study/OneDrive - UC Davis/study/2019spring-pro/ECS289G/midterm/kinchat_exp_subset_r.csv")
kinchat$Gender <- factor(kinchat$Gender)
kinchat$`Media Condition` <- factor(kinchat$`Media Condition`)
lm2 <-aov (data=kinchat, `social cues`~Gender + `Media Condition` +
`Number of Words` + `Number of Emoticons`)
lm2 <-aov (data=kinchat, `social cues`~Gender + `Media Condition` +
`Number of Words` + `Number of Emoticons Typed`)
summary(lm2)
summary(lm2)
cor(kinchat)
plot(kinchat)
corplot(kinchat)
M = cor(kinchat[,c(4,5,6,7,8,9,10,11)])
library(corrplot)
corrplot(M, method="circle")
lm2 <-aov (data=kinchat, `social cues`~ `Media Condition` )
summary(lm2)
lm2 <-aov (data=kinchat, `social cues`~ `expression other` )
lm2 <-aov (data=kinchat, `social cues`~ `expressions other` )
summary(lm2)
lm2 <-aov (data=kinchat, `social cues`~ `Number of Words` )
summary(lm2)
sapply(kinchat,hist)
plot(kinchat)
summary(aov (data=kinchat, `variety of expressions`~ `Media Condition` )
summary(aov (data=kinchat, `variety of expressions`~ `Media Condition` )
)
summary(aov(data=kinchat, `variety of expressions`~ `Media Condition` ))
summary(aov(data=kinchat, `feedback`~ `Media Condition` ))
summary(aov(data=kinchat, `understand other`~ `Media Condition` ))
summary(aov(data=kinchat, `understand self`~ `Media Condition` ))
summary(aov(data=kinchat, `Number of Words`~ `Media Condition` ))
summary(aov(data=kinchat, `Number of Emoticons typed`~ `Media Condition` ))
summary(aov(data=kinchat, `Number of Emoticons Typed`~ `Media Condition` ))
sapply(kinchat[,c(4,5,6,7,8,9,10,11)],hist)
sapply(kinchat[,c(4,5,6,7,8,9,10,11)],shapiro.test)
shapiro.test(log(kinchat$`social cues`))
shapiro.test(sqrt(kinchat$`social cues`))
hist(kinchat$`social cues`)
hist(sqrt(kinchat$`social cues`))
hist(kinchat$`social cues`)
dist(kinchat$`social cues`)
corrplot(M, method="circle",type = "upper")
pairs(kinchat)
seq(4,11
)
for (i in seq(4,11) ){
summary(aov(kinchat[,i]~kinchat$`Media Condition`))
summary(aov(kinchat[,i]~kinchat$`Number of Words`))
summary(aov(kinchat[,i]~kinchat$`Number of Emoticons Typed`))
}
kinchat[,1]
kinchat[,1][1]
kinchat[,1][[1]]
kinchat$`User ID`
for (i in seq(4,11) ){
summary(aov(kinchat[,i][[1]]~kinchat$`Media Condition`))
summary(aov(kinchat[,i][[1]]~kinchat$`Number of Words`))
summary(aov(kinchat[,i][[1]]~kinchat$`Number of Emoticons Typed`))
}
summary(lm2)
result_test = list()
cap('1','2')
cat('1','2')
kinchat[,1]
names(kinchat[,1])
result_test = list()
for (i in seq(4,11)){
result_test[[cat(names(kinchat[,i]),'Media')]] = aov(kinchat[,i][[1]]~kinchat$`Media Condition`)
result_test[[cat(names(kinchat[,i]),'numword')]] = summary(aov(kinchat[,i][[1]]~kinchat$`Number of Words`))
result_test[[cat(names(kinchat[,i]),'numemo')]] = summary(aov(kinchat[,i][[1]]~kinchat$`Number of Emoticons Typed`))
}
result_test[[cat(names(kinchat[,4]),'Media')]] = aov(kinchat[,4][[1]]~kinchat$`Media Condition`)
cat(names(kinchat[,4]),'Media')
result_test[[cat(names(kinchat[,3]),'Media')]] = 1
typeof(cat(names(kinchat[,4]),'Media'))
str(cat(names(kinchat[,4]),'Media'))
result_test[["test"]] = 1
result_test[[paste(names(kinchat[,3]),'Media')]] = 1
result_test = list()
for (i in seq(4,11)){
result_test[[paste(names(kinchat[,i]),'Media')]] = aov(kinchat[,i][[1]]~kinchat$`Media Condition`)
result_test[[paste(names(kinchat[,i]),'numword')]] = summary(aov(kinchat[,i][[1]]~kinchat$`Number of Words`))
result_test[[paste(names(kinchat[,i]),'numemo')]] = summary(aov(kinchat[,i][[1]]~kinchat$`Number of Emoticons Typed`))
}
result_test
lm2 <-aov (data=kinchat, `social cues`~ `Media Condition` )
lm2
summary(lm2)
result_test = list()
for (i in seq(4,11)){
result_test[[paste(names(kinchat[,i]),'Media')]] = summary(aov(kinchat[,i][[1]]~kinchat$`Media Condition`))
result_test[[paste(names(kinchat[,i]),'numword')]] = summary(lm(kinchat[,i][[1]]~kinchat$`Number of Words`))
result_test[[paste(names(kinchat[,i]),'numemo')]] = summary(lm(kinchat[,i][[1]]~kinchat$`Number of Emoticons Typed`))
}
result_test
summary(lm(data=kinchat,feedback~`expressions other`))
plot(lm(data=kinchat,feedback~`expressions other`))
library(MASS)
boxcox(lm(data=kinchat,feedback~`expressions other`))
summary(lm(data=kinchat,log(feedback)~`expressions other`))
plot(lm(data=kinchat,log(feedback)~`expressions other`))
boxcox(lm(data=kinchat,log(feedback)~`expressions other`))
boxcox(lm(data=kinchat,feedback~`expressions other`))
hist(kinchat$feedback)
hist(sqrt(kinchat$feedback))
hist(kinchat$feedback^2)
hist(kinchat$feedback)
hist(kinchat$feedback^1.5)
shapiro.test(kinchat$feedback^1.5)
shapiro.test(rnorm(10))
shapiro.test(sqrt(kinchat$feedback))
shapiro.test(kinchat$feedback^2)
boxcox(lm(data=kinchat,feedback~`expressions other`))
box.cox(lm(data=kinchat,feedback~`expressions other`))
library(car)
box.cox(lm(data=kinchat,feedback~`expressions other`))
bcPower(lm(data=kinchat,feedback~`expressions other`))
U <- c(NA, (-3:3))
U
bcPower(U, 0, gamma=4)
boxcox(data=kinchat,feedback~`expressions other`)
new = (kinchat$feedback ^ 1.5 - 1)/1.5
shapiro.test(new)
plot(new)
hist(new)
hist(kinchat$feedback)
boxcox(data=kinchat,feedback~1)
boxcox(data=kinchat,feedback~`media`)
boxcox(data=kinchat,feedback~`Media Condition`)
boxcox(data=kinchat,feedback~`Media Condition`)
plot(lm(data=kinchat,log(feedback)~`expressions other`))
boxcox(data=kinchat,feedback~`Media Condition`)
plot(aov(new~kinchat$`Media Condition`))
plot(lm(new~kinchat$`expressions other`))
lm(new~kinchat$`expressions other`)
summary(lm(new~kinchat$`expressions other`))
plot(kinchat$`Media Condition`,kinchat$`expressions other`)
plot(kinchat$`Media Condition`,kinchat$`Number of Words`)
summary(lm(kinchat$`social cues`~kinchat$`expressions other`))
result_test
shapiro.test(rnorm(10))
qf(1,30,0.3)
?qf
qf(0.95,1,30)
qf(0.95,1,100)
install.packages("XML")
library("XML")
test = xmlParse(file="~/Downloads/ai.stackexchange.com/Users.xml")
xmldataframe <- xmlToDataFrame(file="~/Downloads/ai.stackexchange.com/Users.xml")
xmldataframe <- xmlToDataFrame("~/Downloads/ai.stackexchange.com/Users.xml")
print(test)
xmldataframe <- xmlToDataFrame("~/Downloads/ai.stackexchange.com/Users.xml")
xmldataframe <- xmlToDataFrame(nodes = xmlChildren(xmlRoot(doc)[["users"]]))
doc <- xmlParse(file="~/Downloads/ai.stackexchange.com/Users.xml")
xmldataframe <- xmlToDataFrame(nodes = xmlChildren(xmlRoot(doc)[["users"]]))
doc <- xmlParse(file="~/Downloads/ai.stackexchange.com/Tags.xml")
doc
install.packages("methods")
install.packages("methods")
library("methods")
doc <- xmlParse(file="~/Downloads/ai.stackexchange.com/Tags.xml")
library("XML")
doc <- xmlParse(file="~/Downloads/ai.stackexchange.com/Tags.xml")
doc
rootnode <-xmlRoot(doc)
rootnode
print(doc)
xmlSize(rootnode)
doc[1]
rootnode[1]
rootnode[2]
rootnode['row']
rootnode['row'][1]
rootnode[['row']]
xmldataframe <- xmlToDataFrame(xmlRoot(doc)[["row"]])
View(xmldataframe)
xmldataframe <- xmlToDataFrame(xmlRoot(doc))
xmldataframe <- xmlToDataFrame("~/Downloads/ai.stackexchange.com/Tags.xml")
xmldataframe <- xmlToDataFrame(getNodeSet(doc,"row"))
View(xmldataframe)
xmldataframe <- xmlToDataFrame(getNodeSet(doc,"Id"))
library("XML")
library("methods")
doc <- xmlParse(file="~/Downloads/ai.stackexchange.com/Tags.xml")
rootnode <-xmlRoot(doc)
rootnode[2]
xmldataframe <- xmlToDataFrame(getNodeSet(doc,"Id"))
xmldataframe <- xmlToDataFrame(getNodeSet(doc,"//row"))
rootnode[:5]
rootnode[1:5]
f = system.file("exampleData", "size.xml", package = "XML")
f
xmlParse(f)
xmlToDataFrame(f, c("integer", "integer", "numeric"))
xmldataframe <- xmlToDataFrame(getNodeSet(doc,"//tags"))
View(xmldataframe)
xmldataframe <- xmlAttrsToDataFrame(getNodeSet(doc, path='//row'))
xmldataframe <- XML::xmlAttrsToDataFrame(getNodeSet(doc, path='//row'))
install.packages("rvest")
library(rvest)
rows <- doc %>% xml_nodes("row")
rows <- doc %>% xml_nodes("row")
doc <- "~/Downloads/ai.stackexchange.com/Tags.xml"
rows <- doc %>% xml_nodes("row")
doc <- xml('<posts>
<row Id="1" PostTypeId="1"
AcceptedAnswerId="15" CreationDate="2010-07-19T19:12:12.510" Score="27"
ViewCount="1647" Body="some text;" OwnerUserId="8"
LastActivityDate="2010-09-15T21:08:26.077"
Title="title" AnswerCount="5" CommentCount="1" FavoriteCount="17" />
</posts>')
rows <- read_xml("~/Downloads/ai.stackexchange.com/Tags.xml")
rows$node
rows$doc
print(rows$doc)
?read_xml
read_html("<html><title>Hi")
vals <-xml_find_all(rows,"//row")
vals[[1]]
true_vals <- trimws(xml_text(vals))
true_vals
trimws(xml_attr(rows,"id"))
trimws(xml_attr(rows,"Id"))
xml_attr(rows,"Id")
?xml_attr
xml_attrs(rows,"Id")
x <- read_xml("<root id='1'><child id ='a' /><child id='b' d='b'/></root>")
xml_attr(x, "id")
xml_attr(x, "apple")
xml_attrs(x)
xml_attrs(vals,"Id")
xml_attrs(vals)
lists = xml_attrs(vals)
lists[[1]]
test = data.frame(matrix(unlist(lists),nrow=length(lists),byrow=T))
test = data.frame(matrix(unlist(lists),nrow=466,byrow=T))
View(test)
test = as.data.frame(lists)
install.packages("devtools")
source_gist(4676064)
devtools::source_gist(4676064)
test = as.data.frame(lists)
View(test)
load("~/study/OneDrive - UC Davis/study/2018fall/MCGD/data/Untitled.RData")
lmiconic = lme(data=gldata, log(Iconic.gesture+1)~Media.Condition+Task +Gender+Language.Group+User.Spoken.Language + word_count+sentence_count+turns+overlap_rate+open_rate+unique_word, random = ~1|Group/Individual)
library(nlme)
lmiconic = lme(data=gldata, log(Iconic.gesture+1)~Media.Condition+Task +Gender+Language.Group+User.Spoken.Language + word_count+sentence_count+turns+overlap_rate+open_rate+unique_word, random = ~1|Group/Individual)
lmiconic = lme(data=sampledata, log(Iconic.gesture+1)~Media.Condition+Task +Gender+Language.Group+User.Spoken.Language + word_count+sentence_count+turns+overlap_rate+open_rate+unique_word, random = ~1|Group/Individual)
lmiconic_sl = lme(data=sampledata, log(Iconic.gesture+1)~Media.Condition+Task ,random = ~1|Group/Individual)
summary(lmiconic_sl)
lmmeta= lme(data=sampledata, sqrt(Metaphoric.gesture)~Media.Condition+Task, random = ~1|Group/Individual)
anova(lmmeta)
lmnon = lme(data=gldata, sqrt(Non.iconic)~Media.Condition+Task+Gender+Language.Group+User.Spoken.Language + word_count+sentence_count+turns+overlap_rate+open_rate+unique_word, random = ~1|Group/Individual)
lmnon_select = lme(data=sampledata, sqrt(Non.iconic)~Media.Condition+Task, random = ~1|Group/Individual)
summary(lmnon_select)
lmpoint = lme(data=sampledata,log(Pointing.Gesture+1)~Media.Condition+Task, random= ~1|Group/Individual)
summary(lmpoint)
fittediconic = cbind(fitted(lmiconic_sl,level=0:1),sampledata[,c(1,2,3,4,5,6,9,10)])
summarySE <- function(data=NULL, measurevar, groupvars=NULL, na.rm=FALSE,
conf.interval=.95, .drop=TRUE) {
library(plyr)
# New version of length which can handle NA's: if na.rm==T, don't count them
length2 <- function (x, na.rm=FALSE) {
if (na.rm) sum(!is.na(x))
else       length(x)
}
# This does the summary. For each group's data frame, return a vector with
# N, mean, and sd
datac <- ddply(data, groupvars, .drop=.drop,
.fun = function(xx, col) {
c(N    = length2(xx[[col]], na.rm=na.rm),
mean = mean   (xx[[col]], na.rm=na.rm),
sd   = sd     (xx[[col]], na.rm=na.rm)
)
},
measurevar
)
# Rename the "mean" column
datac <- rename(datac, c("mean" = measurevar))
datac$se <- datac$sd / sqrt(datac$N)  # Calculate standard error of the mean
# Confidence interval multiplier for standard error
# Calculate t-statistic for confidence interval:
# e.g., if conf.interval is .95, use .975 (above/below), and use df=N-1
ciMult <- qt(conf.interval/2 + .5, datac$N-1)
datac$ci <- datac$se * ciMult
return(datac)
}
lmiconic_sl = lme(data=sampledata, log(Iconic.gesture+1)~Media.Condition+Task ,random = ~1|Group/Individual)
lmmeta= lme(data=sampledata, sqrt(Metaphoric.gesture)~Media.Condition+Task, random = ~1|Group/Individual)
lmnon_select = lme(data=sampledata, sqrt(Non.iconic)~Media.Condition+Task, random = ~1|Group/Individual)
lmpoint = lme(data=sampledata,log(Pointing.Gesture+1)~Media.Condition+Task, random= ~1|Group/Individual)
fittediconic = cbind(fitted(lmiconic_sl,level=0:1),sampledata[,c(1,2,3,4,5,6,9,10)])
fittedmetaphoric = cbind(fitted(lmmeta,level=0:1),sampledata[,c(1,2,3,4,5,6,9,10)])
fittednon = cbind(fitted(lmnon_select,level=0:1),sampledata[,c(1,2,3,4,5,6,9,10)])
fittedpoint = cbind(fitted(lmpoint,level=0:1),sampledata[,c(1,2,3,4,5,6,9,10)])
iconic_media <- summarySE(fittediconic, measurevar="fixed", groupvars=c("Media.Condition"))
iconic_task <- summarySE(fittediconic, measurevar="fixed", groupvars=c("Task"))
meta_media <- summarySE(fittedmetaphoric, measurevar="fixed", groupvars=c("Media.Condition"))
meta_task <- summarySE(fittedmetaphoric, measurevar="fixed", groupvars=c("Task"))
non_media <- summarySE(fittednon, measurevar="fixed", groupvars=c("Media.Condition"))
non_task <- summarySE(fittednon, measurevar="fixed", groupvars=c("Task"))
point_media <- summarySE(fittedpoint, measurevar="fixed", groupvars=c("Media.Condition"))
point_task <- summarySE(fittedpoint, measurevar="fixed", groupvars=c("Task"))
mediaest <- rbind(iconic_media,
meta_media,
non_media,
point_media)
mediaest$gesture = rep(c("IG","MG","OG","PG"),each=3)
mediaest_plot = ggplot(mediaest, aes(x=Media.Condition,y=fixed,color = gesture)) +
geom_line() +
geom_point()+
geom_errorbar(aes(ymin=fixed-se, ymax=fixed+se),
width=.4) +
theme_grey() + scale_colour_grey()+ theme(legend.position='none')
mediaest_plot2 = ggplot(mediaest, aes(x=Media.Condition,y=fixed,fill=gesture)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=fixed-se, ymax=fixed+se),
width=.2,                    # 误差棒的宽度
position=position_dodge(.9),
colour = "black") +
ylab("representative of gesture count") + xlab("") +
theme_bw()+ scale_fill_grey() +#scale_fill_manual(values=c("#548235", "#C55A11", "#999999"))  +
theme(axis.text = element_text(face="bold",size=15),
axis.title = element_text(face='bold',size=15),
axis.text.x = element_text(face='bold',size=15),
legend.text = element_text(face='bold',size=10),
legend.title = element_text(face='bold',size=15))
mediaest_plot2
library(ggplot2)
mediaest_plot2 = ggplot(mediaest, aes(x=Media.Condition,y=fixed,fill=gesture)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=fixed-se, ymax=fixed+se),
width=.2,                    # 误差棒的宽度
position=position_dodge(.9),
colour = "black") +
ylab("representative of gesture count") + xlab("") +
theme_bw()+ scale_fill_grey() +#scale_fill_manual(values=c("#548235", "#C55A11", "#999999"))  +
theme(axis.text = element_text(face="bold",size=15),
axis.title = element_text(face='bold',size=15),
axis.text.x = element_text(face='bold',size=15),
legend.text = element_text(face='bold',size=10),
legend.title = element_text(face='bold',size=15))
mediaest_plot2
View(mediaest)
ggplot(mediaest, aes(x=gesture,y=fixed,color=Media.Condition)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=fixed-se, ymax=fixed+se),
width=.2,                    # 误差棒的宽度
position=position_dodge(.9),
colour = "black") +
ylab("representative of gesture count") + xlab("") +
theme_bw()+ scale_fill_grey() +#scale_fill_manual(values=c("#548235", "#C55A11", "#999999"))  +
theme(axis.text = element_text(face="bold",size=15),
axis.title = element_text(face='bold',size=15),
axis.text.x = element_text(face='bold',size=15),
legend.text = element_text(face='bold',size=10),
legend.title = element_text(face='bold',size=15))
ggplot(mediaest, aes(x=gesture,y=fixed,fill=Media.Condition)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=fixed-se, ymax=fixed+se),
width=.2,                    # 误差棒的宽度
position=position_dodge(.9),
colour = "black") +
ylab("representative of gesture count") + xlab("") +
theme_bw()+ scale_fill_grey() +#scale_fill_manual(values=c("#548235", "#C55A11", "#999999"))  +
theme(axis.text = element_text(face="bold",size=15),
axis.title = element_text(face='bold',size=15),
axis.text.x = element_text(face='bold',size=15),
legend.text = element_text(face='bold',size=10),
legend.title = element_text(face='bold',size=15))
ggplot(mediaest, aes(x=gesture,y=fixed,fill=Media.Condition)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=fixed-se, ymax=fixed+se),
width=.2,                    # 误差棒的宽度
position=position_dodge(.9),
colour = "black") +
ylab("representative of gesture count") + xlab("") +
theme_bw()+ scale_fill_manual(values=c("#548235", "#C55A11", "#999999"))  +
theme(axis.text = element_text(face="bold",size=15),
axis.title = element_text(face='bold',size=15),
axis.text.x = element_text(face='bold',size=15),
legend.text = element_text(face='bold',size=10),
legend.title = element_text(face='bold',size=15))
mediaest$Media.Condition
?factor
mediaest$Media.Condition = factor(mediaest$Media.Condition, levels=c("A","V","F"), labels=c("Audio","V-Handvis","F2F"))
mediaest$Media.Condition
ggplot(mediaest, aes(x=gesture,y=fixed,fill=Media.Condition)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=fixed-se, ymax=fixed+se),
width=.2,                    # 误差棒的宽度
position=position_dodge(.9),
colour = "black") +
ylab("representative of gesture count") + xlab("") +
theme_bw()+ scale_fill_manual(values=c("#548235", "#C55A11", "#999999"))  +
theme(axis.text = element_text(face="bold",size=15),
axis.title = element_text(face='bold',size=15),
axis.text.x = element_text(face='bold',size=15),
legend.text = element_text(face='bold',size=10),
legend.title = element_text(face='bold',size=15))
ggsave("media_gesture_H3.png",mediaest_plot3,device=cairo_ps,dpi=300)
mediaest_plot3 = ggplot(mediaest, aes(x=gesture,y=fixed,fill=Media.Condition)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=fixed-se, ymax=fixed+se),
width=.2,                    # 误差棒的宽度
position=position_dodge(.9),
colour = "black") +
ylab("representative of gesture count") + xlab("") +
theme_bw()+ scale_fill_manual(values=c("#548235", "#C55A11", "#999999"))  +
theme(axis.text = element_text(face="bold",size=15),
axis.title = element_text(face='bold',size=15),
axis.text.x = element_text(face='bold',size=15),
legend.text = element_text(face='bold',size=10),
legend.title = element_text(face='bold',size=15))
ggsave("media_gesture_H3.png",mediaest_plot3,device=cairo_ps,dpi=300)
mediaest_plot3 = ggplot(mediaest, aes(x=gesture,y=fixed,fill=Media.Condition)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=fixed-se, ymax=fixed+se),
width=.2,                    # 误差棒的宽度
position=position_dodge(.9),
colour = "black") +
ylab("representative of gesture count") + xlab("") +
theme_bw()+ scale_fill_manual(values=c("#548235", "#C55A11", "#999999"))  +
theme(axis.text = element_text(face="bold",size=15),
axis.title = element_text(face='bold',size=15),
axis.text.x = element_text(face='bold',size=15),
legend.text = element_text(size=10),
legend.title = element_text(size=10))
ggsave("media_gesture_H3.png",mediaest_plot3,device=cairo_ps,dpi=300)
setwd("~/study/OneDrive - UC Davis/study/2020winter/ECS272/github_homework/ECS272-Winter2020/h3")
library(ggplot2)
library(data.table)
library(tidyr)
library(dplyr)
## 1.data
traffic = read.csv("Traffic.csv")
traffic$Terminal = factor(traffic$Terminal)
library(reshape2)
acast(traffic, Passenger_Count~Terminal)
acast(traffic, Passenger_Count~Terminal, value.var="value")
acast(traffic, ReportPeriod~Terminal, value.var="Passenger_Count")
test = acast(traffic, ReportPeriod~Terminal, value.var="Passenger_Count")
View(test)
test = dcast(traffic, ReportPeriod~Terminal, value.var="Passenger_Count")
test = dcast(traffic[Domestic_International=='Domestic',], ReportPeriod~Terminal, sum, value.var="Passenger_Count")
traffic[Domestic_International=='Domestic']
traffic[traffic$Domestic_International=='Domestic',]
test = dcast(traffic[traffic$Domestic_International=='Domestic',], ReportPeriod~Terminal, sum, value.var="Passenger_Count")
View(test)
traffic$ReportPeriod[0]
traffic$ReportPeriod[:10]
traffic$ReportPeriod
traffic$ReportPeriod = strptime(traffic$ReportPeriod,"%m-%d-%Y %H:%M:%S AM")
library(readr)
Traffic <- read_csv("Traffic.csv", col_types = cols(ReportPeriod = col_datetime(format = "%m/%d/%Y %H:%M:%S AM")))
View(Traffic)
Traffic$ReportPeriod[0]
Traffic$ReportPeriod[1]
Traffic$ReportPeriod[1].date()
Traffic$ReportPeriod[1][[1]]
Traffic$ReportPeriod[1][[2]]
Traffic$ReportPeriod[1]
type(Traffic$ReportPeriod[1])
typeof(Traffic$ReportPeriod[1])
Traffic$ReportPeriod[1]$yday
unclass(Traffic$ReportPeriod[1])
unclass(as.POSIXlt(Traffic$ReportPeriod[1]))
## 1.data
traffic = read.csv("Traffic2.csv")
traffic$Terminal = factor(traffic$Terminal)
## 1.data
traffic = read.csv("Traffic2.csv")
traffic$ReportPeriod = as.Date(traffic$ReportPeriod)
traffic$ReportPeriod[1]
months(traffic$ReportPeriod[1])
years(traffic$ReportPeriod[1])
year(traffic$ReportPeriod[1])
test = dcast(traffic[traffic$Domestic_International=='Domestic',], ReportPeriod~Terminal, sum, value.var="Passenger_Count")
write.csv(test,"traffic_povit_dom.csv")
